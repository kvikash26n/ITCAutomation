package utility;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.security.SecureRandom;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.openqa.selenium.WebDriver;

/**
 * @author 29265
 *
 */
public class util {
	public static WebDriver driver;
	 public static List<Integer>a;
	public util(WebDriver driver) {
		this.driver = driver;
	}

	
	
	public WebDriver getDriver() {
		return driver;
	}
		
	 String ExtractDayFromDate(String dateinput) {
		// TODO Auto-generated method stub
		 Date now = new Date(dateinput);
		 
	       SimpleDateFormat simpleDateformat = new SimpleDateFormat(""); // the day of the week abbreviated
	      //  System.out.println(simpleDateformat.format(now));
	 
	        simpleDateformat = new SimpleDateFormat("EEEE"); // the day of the week spelled out completely
	        String day=simpleDateformat.format(now);
	      //  System.out.println(day);
			return day;
	}

	int generateRandomNoInList(int no_of_max_pax) {
		Random random = new Random();
		int no;
		a = new ArrayList<Integer>();
		///
		for (int c = 1; c <= 6; c++) {
			no = random.nextInt(5) + 1;

			a.add(no);

		}
		// System.out.println(a);
		int sum = 0;

		for (int i : a) {
			sum += i;
		}
		return sum;
	}
	
	public static final String SAMPLE_XLSX_FILE_PATH = "C:\\Users\\29265\\Desktop\\SpicjetTestdataPNR.xlsx";

    ArrayList GetColumnValue(int colno,String Sheetname) throws IOException, InvalidFormatException {

        // Creating a Workbook from an Excel file (.xls or .xlsx)
    	//List date=new ArrayList();
    	List  addval=new ArrayList();
        Workbook workbook = WorkbookFactory.create(new File(SAMPLE_XLSX_FILE_PATH));

        // Retrieving the number of sheets in the Workbook
        System.out.println("Workbook has " + workbook.getNumberOfSheets() + " Sheets : ");
        

        // Getting the Sheet at index zero
        //Sheet sheet = workbook.getSheetAt(2);
        Sheet   sheet = workbook.getSheet(Sheetname);
      //  Sheet sheet  = workBook.getSheetAt(0); // Get Your Sheet.

        for (Row row : sheet) { // For each Row.
            Cell cell = row.getCell(colno); // Get the Cell at the Index / Column you want.
            //System.out.println(cell);
            addval.add(cell);
        }
System.out.println(addval);
return  (ArrayList) addval;
    }
	
	
	public static int price(String price)
	{
	 String price1=price;
	  price1 = price1.indexOf(".") < 0 ? price1 : price1.replaceAll("0*$", "").replaceAll("\\.$", "");
	  // float price1_1 = Float.parseFloat(price1);
	   String newStr = price1.replaceAll(",", "");
	   int price1_1 = Integer.parseInt(newStr);	
	  
	   return price1_1;
	}
	public static String randonString(int n) {


		final String AB = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		SecureRandom rnd = new SecureRandom();

		   StringBuilder sb = new StringBuilder(n);
		   for( int i = 0; i < n; i++ ) 
		      sb.append( AB.charAt( rnd.nextInt(AB.length()) ) );
		   return sb.toString();
		  
		}
	public static String randonNumber(int n) {


		final String AB = "1234567890";
		SecureRandom rnd = new SecureRandom();

		   StringBuilder sb = new StringBuilder(n);
		   for( int i = 0; i < n; i++ ) 
		      sb.append( AB.charAt( rnd.nextInt(AB.length()) ) );
		   return sb.toString();
		  
		}
	
	public static void printTextWithExisting(String pnr)
	{
		try
		{
		    String filename= "C:\\Users\\29265\\Desktop\\pnr.txt";
		    FileWriter fw = new FileWriter(filename,true); //the true will append the new data
		    fw.write(pnr+"\n");//appends the string to the file
		    fw.close();
		}
		catch(IOException ioe)
		{
		    System.err.println("IOException: " + ioe.getMessage());
		}
	}
	 public static void PrintText(String pnr, String amount) {
        BufferedWriter writer = null;
        try {
            //create a temporary file
            String timeLog = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
          
            File logFile = new File("PNR_"+pnr+"_"+timeLog);

            // This will output the full path where the file will be written to...
            System.out.println(logFile.getCanonicalPath());

            writer = new BufferedWriter(new FileWriter(logFile));
            writer.write(pnr);
            writer.write(amount);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Close the writer regardless of what happens...
                writer.close();
            } catch (Exception e) {
            }
        }
    }
	 //PNR_CancelRecord
	 public static void  PrintPnrCancel(Map<String, Object[]> pnrdata) throws EncryptedDocumentException, InvalidFormatException, IOException {
			// TODO Auto-generated method stub
			 String excelFilePath = "C:\\Users\\29265\\Desktop\\PNR_CancelledRecord.xlsx";
			 DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
				LocalDate localDate = LocalDate.now();
				System.out.println(dtf.format(localDate)); //2016/11/16
			    String da=dtf.format(localDate);
			    String datePartscurrent[] = da.split("/");
				String yearcurrent = datePartscurrent[0];
				String monthcurrent = datePartscurrent[1];
				String daycurrent = datePartscurrent[2];
			    String finalsheetname=daycurrent+"_"+monthcurrent+"_"+yearcurrent;
			    finalsheetname=finalsheetname+util.randonString(2);
			        FileInputStream inputStream = new FileInputStream(new File(excelFilePath));
			        Workbook workbook = WorkbookFactory.create(inputStream);

			        Sheet newSheet = workbook.createSheet(finalsheetname);
			
			
			
			// XSSFWorkbook workbook = new XSSFWorkbook(); 
	         
		        //Create a blank sheet
		    //    XSSFSheet sheet = workbook.createSheet("Employee Data");
		          
		        //This data needs to be written (Object[])
			       // pnrdata = new TreeMap<String, Object[]>();
			     //   pnrdata.put("1", new Object[] {"ID", "NAME", "LASTNAME"});
		      //  data.put("2", new Object[] {1, "Amit", "Shukla"});
		      //  data.put("3", new Object[] {2, "Lokesh", "Gupta"});
		      //  data.put("4", new Object[] {3, "John", "Adwards"});
		      //  data.put("5", new Object[] {4, "Brian", "Schultz"});
		          
		        //Iterate over data and write to sheet
		        Set<String> keyset = pnrdata.keySet();
		        int rownum = 0;
		        for (String key : keyset)
		        {
		            Row row = newSheet.createRow(rownum++);
		            Object [] objArr = pnrdata.get(key);
		            int cellnum = 0;
		            for (Object obj : objArr)
		            {
		               Cell cell = row.createCell(cellnum++);
		               if(obj instanceof String)
		                    cell.setCellValue((String)obj);
		                else if(obj instanceof Integer)
		                    cell.setCellValue((Integer)obj);
		            }
		        }
		        try
		        {
		            //Write the workbook in file system
		            FileOutputStream out = new FileOutputStream(new File(excelFilePath));
		            workbook.write(out);
		            out.close();
		            System.out.println("howtodoinjava_demo.xlsx written successfully on disk.");
		        } 
		        catch (Exception e) 
		        {
		            e.printStackTrace();
		        }
				
		    }
	 
	 
	 public static void  PrintPnr(Map<String, Object[]> pnrdata) throws EncryptedDocumentException, InvalidFormatException, IOException {
			// TODO Auto-generated method stub
			 String excelFilePath = "C:\\Users\\29265\\Desktop\\PNRRecord.xlsx";
			 DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
				LocalDate localDate = LocalDate.now();
				System.out.println(dtf.format(localDate)); //2016/11/16
			    String da=dtf.format(localDate);
			    String datePartscurrent[] = da.split("/");
				String yearcurrent = datePartscurrent[0];
				String monthcurrent = datePartscurrent[1];
				String daycurrent = datePartscurrent[2];
			    String finalsheetname=daycurrent+"_"+monthcurrent+"_"+yearcurrent;
			    finalsheetname=finalsheetname+util.randonString(2);
			        FileInputStream inputStream = new FileInputStream(new File(excelFilePath));
			        Workbook workbook = WorkbookFactory.create(inputStream);

			        Sheet newSheet = workbook.createSheet(finalsheetname);
			
			
			
			// XSSFWorkbook workbook = new XSSFWorkbook(); 
	         
		        //Create a blank sheet
		    //    XSSFSheet sheet = workbook.createSheet("Employee Data");
		          
		        //This data needs to be written (Object[])
			       // pnrdata = new TreeMap<String, Object[]>();
		      //  data.put("1", new Object[] {"ID", "NAME", "LASTNAME"});
		      //  data.put("2", new Object[] {1, "Amit", "Shukla"});
		      //  data.put("3", new Object[] {2, "Lokesh", "Gupta"});
		      //  data.put("4", new Object[] {3, "John", "Adwards"});
		      //  data.put("5", new Object[] {4, "Brian", "Schultz"});
		          
		        //Iterate over data and write to sheet
		        Set<String> keyset = pnrdata.keySet();
		        int rownum = 0;
		        for (String key : keyset)
		        {
		            Row row = newSheet.createRow(rownum++);
		            Object [] objArr = pnrdata.get(key);
		            int cellnum = 0;
		            for (Object obj : objArr)
		            {
		               Cell cell = row.createCell(cellnum++);
		               if(obj instanceof String)
		                    cell.setCellValue((String)obj);
		                else if(obj instanceof Integer)
		                    cell.setCellValue((Integer)obj);
		            }
		        }
		        try
		        {
		            //Write the workbook in file system
		            FileOutputStream out = new FileOutputStream(new File(excelFilePath));
		            workbook.write(out);
		            out.close();
		            System.out.println("howtodoinjava_demo.xlsx written successfully on disk.");
		        } 
		        catch (Exception e) 
		        {
		            e.printStackTrace();
		        }
				
		    }
}

